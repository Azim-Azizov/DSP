













































%%LAB1
clc;
fs = 1000;
t = 0 : 1/fs : 1-1/fs;

f1 = 50;
f2 = 150;
x = sin(2 * pi * f1 * t) + sin(2 * pi * f2 * t);

noise = 0.5 * randn(size(t));
x_noist = x + noise;

figure
subplot(4, 1, 1); plot(t, x); title("Original Signal"); xlabel("Time(seconds)"); ylabel("Amplitude");
subplot(4, 1, 2); plot(t, x_noisy); title("Noisy Signal"); xlabel("Time(seconds)"); ylabel("Amplitude");

%FIR Filter
cutoff_freq = 100;
order = 50;
b = fir1(order, cutoff_freq/(fs/2));

x_filtered = filter(b, 1, x_noisy);
subplot(4, 1, 3); plot(t, x_filtered); title("Filtered Signal(FIR)"); xlabel("Time(seconds)"); ylabel("Amplitude");

%IIR Filter
[b, a] = butter(4, cutoff_freq/(fs/2));
x_filtered_iir = filter(b, a, x_noisy);

subplot(4, 1, 4); plot(t, x_filtered_iir); title("Filtered Signal(FIR)"); xlabel("Time(seconds)"); ylabel("Amplitude");

%Frequency response of the FIR Filter
figure
freqz(b, 1, 1024, fs);

%Frequency domain
X = abs(fft(x));
X_noisy = abs(fft(x_noisy));
X_filtered = abs(fft(x_filtered));
X_filtered_iir = abs(fft(x_filtered_iir));

N = length(t);
f = (0 : N - 1) * fs / N;

subplot(4, 1, 1); plot(f, X); title("Original Signal"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");
subplot(4, 1, 2); plot(f, X_noisy); title("Noisy Signal"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");
subplot(4, 1, 3); plot(f, X_filtered); title("Filtered Signal(FIR)"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");
subplot(4, 1, 4); plot(f, X_filtered_iir); title("Filtered Signal(IIR)"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");




%High-Pass
b_hp = fir1(order, cutoff_freq/(fs/2), "high");
x_hp_filtered = filter(b_hp, 1, x_noisy);

figure
subplot(4, 1, 1); plot(t, x); title("Original Signal"); xlabel("Time(seconds)"); ylabel("Amplitude");
subplot(4, 1, 2); plot(t, x_noisy); title("Noisy Signal"); xlabel("Time(seconds)"); ylabel("Amplitude");
subplot(4, 1, 3); plot(t, x_hp_filtered); title("Filtered Signal(FIR)"); xlabel("Time(seconds)"); ylabel("Amplitude");

[b_hp, a_hp] = butter(4, cutoff_freq/(fs/2), "high");
x_hp_filtered_iir = filter(b_hp, a_hp, x_noisy);

subplot(4, 1, 4); plot(t, x_filtered_iir); title("Filtered Signal(IIR)"); xlabel("Time(seconds)"); ylabel("Amplitude");

%Freq response of High-pass
figure
freqz(b_hp, 1, 1024, fs);

%Freq domain
X_hp_filtered = abs(fft(x_hp_filtered));
X_hp_filtered_iir = abs(fft(x_hp_filtered_iir));

figure
subplot(4, 1, 1); plot(f, X); title("Original Signal"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");
subplot(4, 1, 2); plot(f, X_noisy); title("Noisy Signal"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");
subplot(4, 1, 3); plot(f, X_hp_filtered); title("Filtered Signal(FIR)"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");
subplot(4, 1, 4); plot(f, X_hp_filtered_iir); title("Filtered Signal(IIR)"); grid on; xlabel("Freq(HZ)"); ylabel("Magnitude");

%%LAB1.2
clc;
fs = 1000;
t = 0 : 1/fs : 1;
f = 5;
x = sin(2 * pi * f * t);

figure
plot(t, x); title("Sinusoidal"); grid on; xlabel("Time(s)"); ylabel("Amplitude");

sq_wave = square(2 * pi * f * t);

figure
plot(t, sq_wave); title("Square Wave Signal"); grid on; xlabel("Time(s)"); ylabel("Amplitude");

f_signal = 10;
fs_low = 15;
fs_high = 50;

t_low = 0 : 1/fs_low : 1;
t_high = 0 : 1/fs_high : 1;

x_low = sin(2 * pi * f_signal * t_low);
x_high = sin(2 * pi * f_signal * t_high);

figure
subplot(2, 1, 1); stem(t_low, x_low, "r"); 
hold on;
plot(t_high, x_high, "b"); xlabel("Time(s)"); ylabel("Amplitude");
title("Aliasing effect"); grid on; legend("Low Sampling", "High Sampling");

%Quantization
n_bits = 3; % Number of quantization bits
quant_levels = 2^n_bits;
x_quantized = round(x * quant_levels) / quant_levels;

figure;
plot(t, x, 'b', t, x_quantized, 'r--');
xlabel('Time (s)'); ylabel('Amplitude');
title('Quantization Effect');
legend('Original Signal', 'Quantized Signal');
grid on;

%FFT
N = length(x);
X = fft(x);
f_axis = linspace(-fs/2, fs/2, N);

figure;
plot(f_axis, abs(fftshift(X))); xlabel('Frequency (Hz)'); ylabel('Magnitude'); 
title('Frequency Spectrum of the Signal'); grid on;

%%LAB2
clc;
N = 51;
noise = 0.8 * (rand(1, N) - 0.5);
m = 0:N-1;
s = 2 * m.*(0.9.^m);
x_noisy = s + noise;

subplot(2, 1, 1); plot(m, s, "r"); grid on; 
hold on; plot(m, x_noisy, "b"); grid on;
hold on;  plot(1:N, noise, "g"); grid on;
legend("Original Signal", "Noisy Signal", "Random Noise");

x1 = [0 0 x_noisy];
x2 = [0 x_noisy 0];
x3 = [x_noisy 0 0];
y = (x1 - x2 + x3) / 3;

subplot(2, 1, 2); plot(1:length(y), y, m, x_noisy); title("Filtered Signal"); grid on;

n = 0:100;
s1 = cos(2 * pi * 0.05 * n);
s2 = cos(2 * pi * 0.47 * n);

x = s1 + s2;
M = input("Enter the order: ");
num = ones(1, M);
y = filter(num, 1, x) / M;

figure
subplot(2, 2, 1); plot(n, s1);
axis([0, 100, -2, 2]);
xlabel("Time(s)");  ylabel("Amplitude"); title("first component");

subplot(2, 2, 2); plot(n, s2);
axis([0, 100, -2, 2]);
xlabel("Time(s)");  ylabel("Amplitude"); title("second component");

subplot(2, 2, 3); plot(n, x);
axis([0, 100, -2, 2]);
xlabel("Time(s)");  ylabel("Amplitude"); title("Input Signal");

subplot(2, 2, 4); plot(n, y);
axis([0, 100, -2, 2]);
xlabel("Time(s)");  ylabel("Amplitude"); title("Output Signal");
axis;

X = abs(fft(x));
Y = abs(fft(y));
figure
subplot(2, 1, 1); plot(X); title('Spectrum of input signal');
subplot(2, 1, 2); plot(Y); title('Spectrum of output signal');

%%LAB2EX
clc;
fs = 1000;
t = 0 : 1/fs : 1;
f = 10;

x = sin(2 * pi * f * t);
noise = 0.5 * randn(size(t));
x_noisy = x + noise;

plot(t, x); title('Noisy Signal'); grid on; xlabel('Time (s)'); ylabel('Amplitude'); 

%1st method
N = 10; 
h = ones(1, N) / N;
y1 = conv(x, h, "same");

%2nd method
y2 = filter(h, 1, x);

%3rd method
y3 = movmean(x, N);

figure;
subplot(4, 1, 1); plot(t, x_noisy); grid on; xlabel('Time (s)'); ylabel('Amplitude');
subplot(4, 1, 2); plot(t, y1); grid on; xlabel('Time (s)'); ylabel('Amplitude');
subplot(4, 1, 3); plot(t, y2); grid on; xlabel('Time (s)'); ylabel('Amplitude');
subplot(4, 1, 4); plot(t, y3); grid on; xlabel('Time (s)'); ylabel('Amplitude');

%%LAB3
clc; clear; close all;

%task1

N = 101;  
x = -50:50;


ft_values = [0.1, 0.25, 0.4];

figure;
hold on;
grid on;
title('Impulse Response of Low-Pass Filter for Different Cutoff Frequencies');
xlabel('Samples');
ylabel('Amplitude');

for i = 1:length(ft_values)
    ft = ft_values(i);
    
   
    h = sinc(2 * ft * x); 
    
   
    window = hamming(N)';
    h_windowed = h .* window;
    
    
    h_windowed = h_windowed / sum(h_windowed);
    
   
    plot(x, h_windowed, 'DisplayName', sprintf('ft = %.2f', ft));
end

legend show;
hold off;

%%

%task2
clc; clear; close all;


fs = 2000;       
fc = 460;        
M = 20;          
N = M + 1;       
ft = fc / fs;    


n = 0:M;  

h = zeros(1, N);  

for i = 1:N
    if n(i) ~= M/2
        h(i) = sin(2 * pi * ft * (n(i) - M/2)) / (pi * (n(i) - M/2));
    else
        h(i) = 2 * ft;  
    end
end


h = h .* hamming(N)';


h = h / sum(h);


figure;
stem(n, h, 'filled');
title('Impulse Response of the Low-Pass FIR Filter');
xlabel('Samples (n)');
ylabel('Amplitude');
grid on;


[H, f] = freqz(h, 1, 1024, fs);


figure;
subplot(2,1,1);
plot(f, abs(H), 'r', 'LineWidth', 1.5);
grid on;
title('Frequency Response (Magnitude)');
xlabel('Frequency (Hz)');
ylabel('Magnitude');


subplot(2,1,2);
plot(f, 20*log10(abs(H)), 'r', 'LineWidth', 1.5);
grid on;
title('Frequency Response (Magnitude in dB)');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');

%%
%Task3
clc; clear; close all;


fs = 2000;      
fc = 460;      
M = 20;          
N = M + 1;      
n = 0:M;        
ft = fc / fs;    


h_sinc = sinc(2 * ft * (n - M/2));


w_hamming = hamming(N)';


h_windowed = h_sinc .* w_hamming;

% Truncated and shifted sinc function
figure;
stem(n - M/2, h_sinc, 'filled', 'LineWidth', 1.5);
xlabel('n');
ylabel('Amplitude');
title('Truncated and Shifted Sinc Function');
grid on;

% Hamming Window
figure;
stem(n - M/2, w_hamming, 'filled', 'LineWidth', 1.5);
xlabel('n');
ylabel('Amplitude');
title('Hamming Window');
grid on;

% Impulse Response of Hamming-Windowed Low-Pass Filter
figure;
stem(n - M/2, h_windowed, 'filled', 'LineWidth', 1.5);
xlabel('n');
ylabel('Amplitude');
title('Impulse Response of Hamming-Windowed Low-Pass Filter');
grid on;


H_windowed = fft(h_windowed, 1024);
H_rect = fft(h_sinc, 1024);  % Compare with rectangular window
H_mag_windowed = abs(H_windowed);
H_mag_rect = abs(H_rect);
H_dB_windowed = 20 * log10(H_mag_windowed);
H_dB_rect = 20 * log10(H_mag_rect);
f = linspace(0, fs/2, length(H_windowed)/2);

% Frequency Response (Linear Scale)
figure;
plot(f, H_mag_rect(1:end/2), '--', 'LineWidth', 1.5, 'DisplayName', 'Rectangular Window');
hold on;
plot(f, H_mag_windowed(1:end/2), 'LineWidth', 1.5, 'DisplayName', 'Hamming Window');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Frequency Response (Linear Scale)');
legend;
grid on;

% Frequency Response (dB Scale)
figure;
plot(f, H_dB_rect(1:end/2), '--', 'LineWidth', 1.5, 'DisplayName', 'Rectangular Window');
hold on;
plot(f, H_dB_windowed(1:end/2), 'LineWidth', 1.5, 'DisplayName', 'Hamming Window');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
title('Frequency Response (dB Scale)');
legend;
grid on;

%%
clc; clear; close all;
fs = 44100;
fc = 5000;
M = 28; % Filter order
N = M + 1;
ft = fc / fs;
n = -M/2:M/2;
h = sinc(2 * ft * n); % Truncated sinc function
% Different Windows
w_rect = rectwin(N)';
w_ham = hamming(N)';
w_hann = hann(N)';
w_black = blackman(N)';
h_rect = h .* w_rect;
h_ham = h .* w_ham;
h_hann = h .* w_hann;
h_black = h .* w_black;
figure;
subplot(2,2,1); stem(n, w_rect, 'm'); title('Rectangular Window');
subplot(2,2,2); stem(n, w_ham, 'c'); title('Hamming Window');
subplot(2,2,3); stem(n, w_hann, 'y'); title('Hann Window');
subplot(2,2,4); stem(n, w_black, 'b'); title('Blackman Window');
% Frequency Responses
figure;
hold on;
[H_rect, f] = freqz(h_rect, 1, 1024, fs);
[H_ham, ~] = freqz(h_ham, 1, 1024, fs);
[H_hann, ~] = freqz(h_hann, 1, 1024, fs);
[H_black, ~] = freqz(h_black, 1, 1024, fs);
plot(f, 20*log10(abs(H_rect)), 'm', 'DisplayName', 'Rectangular Window');
plot(f, 20*log10(abs(H_ham)), 'c', 'DisplayName', 'Hamming Window');
plot(f, 20*log10(abs(H_hann)), 'y', 'DisplayName', 'Hann Window');
plot(f, 20*log10(abs(H_black)), 'b', 'DisplayName', 'Blackman Window');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
title('Comparison of Low-Pass Filters Using Different Windows');
legend;
grid on;
hold off;
% Plot Frequency Response (Non-dB)
figure;
hold on;
plot(f, abs(H_rect), 'm', 'DisplayName', 'Rectangular Window');
plot(f, abs(H_ham), 'c', 'DisplayName', 'Hamming Window');
plot(f, abs(H_hann), 'y', 'DisplayName', 'Hann Window');
plot(f, abs(H_black), 'b', 'DisplayName', 'Blackman Window');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Comparison of Low-Pass Filters Using Different Windows (Non-dB)');
legend;
grid on;
hold off;


%%
%Task 5
clc; clear; close all;

fs = 2000;    
fc = 460;     
M = 20;       
N = M + 1;    
n = 0:M;      
ft = fc / fs; 

h_sinc = sinc(2 * ft * (n - M/2));
w_hamming = hamming(N)';
h_lp = h_sinc .* w_hamming;
h_hp = h_lp .* (-1).^n;

H_lp = fft(h_lp, 1024);
H_hp = fft(h_hp, 1024);

H_dB_lp = 20 * log10(abs(H_lp));
H_dB_hp = 20 * log10(abs(H_hp));

f = linspace(0, fs/2, length(H_lp)/2);

figure;
subplot(2,1,1);
stem(n - M/2, h_lp, 'filled', 'LineWidth', 1.5, 'Color', [0 0.5 1]);
title('Impulse Response of Low-Pass Filter');
xlabel('n');
ylabel('Amplitude');
grid on;

subplot(2,1,2);
stem(n - M/2, h_hp, 'filled', 'LineWidth', 1.5, 'Color', [1 0.2 0.2]);
title('Impulse Response of High-Pass Filter');
xlabel('n');
ylabel('Amplitude');
grid on;

figure;
plot(f, abs(H_lp(1:end/2)), 'LineWidth', 1.5, 'Color', [0 0.5 1], 'DisplayName', 'Low-Pass Filter');
hold on;
plot(f, abs(H_hp(1:end/2)), '--', 'LineWidth', 1.5, 'Color', [1 0.2 0.2], 'DisplayName', 'High-Pass Filter');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Frequency Response (Linear Scale)');
legend;
grid on;
hold off;

figure;
plot(f, H_dB_lp(1:end/2), 'LineWidth', 1.5, 'Color', [0 0.5 1], 'DisplayName', 'Low-Pass Filter');
hold on;
plot(f, H_dB_hp(1:end/2), '--', 'LineWidth', 1.5, 'Color', [1 0.2 0.2], 'DisplayName', 'High-Pass Filter');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
title('Frequency Response (dB Scale)');
legend;
grid on;
hold off;

%%

%Task6
clc; clear; close all;

% Filter parameters
fs = 44100;      
fc1 = 5000;     
fc2 = 15000;     
M = 101;         

% Normalize frequencies
f1 = fc1/fs;
f2 = fc2/fs;

% Time index
n = 1:M;
n_shifted = n - (M+1)/2;  

% Initialize filter coefficient arrays
h_bp = zeros(1,M);
h_bs = zeros(1,M);

% Calculate filter coefficients
for i = 1:M
    if n_shifted(i) == 0 
        h_bp(i) = 2*(f2 - f1);
        h_bs(i) = 1 - 2*(f2 - f1);
    else
        % Band-pass filter
        h_bp(i) = (sin(2*pi*f2*n_shifted(i)) - sin(2*pi*f1*n_shifted(i)))/(pi*n_shifted(i));
        
        % Band-stop filter
        h_bs(i) = (sin(2*pi*f1*n_shifted(i)) - sin(2*pi*f2*n_shifted(i)))/(pi*n_shifted(i));
    end
end

% Apply Hamming window
window = hamming(M)';
h_bp = h_bp .* window;
h_bs = h_bs .* window;

% Calculate frequency responses
[H_bp, f] = freqz(h_bp, 1, 1024, fs);
[H_bs, f] = freqz(h_bs, 1, 1024, fs);

% Plot impulse responses
figure;
subplot(2,1,1);
stem(n, h_bp, 'color', [0.2 0.6 0.8], 'LineWidth', 1.5, 'MarkerFaceColor', [0.2 0.6 0.8]);
title('Band-Pass Filter Impulse Response (Hamming Window)');
xlabel('Samples'); ylabel('Amplitude');
grid on;

subplot(2,1,2);
stem(n, h_bs, 'color', [0.8 0.4 0.2], 'LineWidth', 1.5, 'MarkerFaceColor', [0.8 0.4 0.2]);
title('Band-Stop Filter Impulse Response (Hamming Window)');
xlabel('Samples'); ylabel('Amplitude');
grid on;

% Plot frequency responses
figure;
subplot(2,1,1);
plot(f, abs(H_bp), 'color', [0.4 0.8 0.2], 'LineWidth', 2); hold on;
plot(f, abs(H_bs), 'color', [0.9 0.3 0.3], 'LineWidth', 2);
title('Frequency Response (Linear Scale)');
xlabel('Frequency (Hz)'); ylabel('Magnitude');
legend('Band-Pass Filter', 'Band-Stop Filter');
grid on; xlim([0 fs/2]);
hold off;

subplot(2,1,2);
plot(f, 20*log10(abs(H_bp)), 'color', [0.4 0.8 0.2], 'LineWidth', 2); hold on;
plot(f, 20*log10(abs(H_bs)), 'color', [0.9 0.3 0.3], 'LineWidth', 2);
title('Frequency Response (dB Scale)');
xlabel('Frequency (Hz)'); ylabel('Magnitude (dB)');
legend('Band-Pass Filter', 'Band-Stop Filter');
grid on; xlim([0 fs/2]); ylim([-120 10]);
hold off;

%%LAB4
clc; clear; clf;
x = 0:127;
x = x / 1024;
y = -16*x + 3;
t = 0:127;
F = [y, zeros(1, 129), ones(1, 128), sin(2*pi*0.017*t) + 1];

N = 1024;

f = linspace(0, 0.5, N/2+1);
plot(f, F); title("Frequency Response"); grid on;

%Inverse
h = ifft(F, N, 'symmetric');

%Shift
h_shifted = fftshift(h);

%Truncate
M_array = [40, 100, 300, 1000];
for i = 1:length(M_array)
    M = M_array(i);
    h_truncated = h_shifted(N/2 - M/2 : N/2 + M/2);
    
    %Windowed
    window = hamming(M+1)';
    h_windowed = h_truncated .* window;
    
    n = 0 : M;
    figure
    subplot(3, 1, 1); plot(n, h_windowed); title("Filter Kernel for M = ", num2str(M)); grid on;
    
    %FFT
    H_windowed = fft(h_windowed, N);
    f = linspace(0, 0.5, N/2+1);
 
    subplot(3, 1, 2); plot(f, abs(H_windowed(1 : N/2 + 1))); title("Frequency response"); grid on;
    subplot(3, 1, 3); plot(f, 20 * log10(abs(H_windowed(1 : N/2 + 1)))); title("Frequency response(DB)"); grid on;
end

%%LAB4.2
increment=.01;
cw=2;
dw=2.01;
SmoothWidth=4;

x=0:increment:20;
y=zeros(size(x));
y(900:1300)=1.3;

y=y+.01.*randn(size(y));

c=gaussian(x,0,cw)+gaussian(x,max(x),cw);
c2=gaussian(x,0,dw)+gaussian(x,max(x),dw);

yc=ifft(fft(y).*fft(c))./sum(c);

yc=yc+.00000001.*randn(size(yc));

ydc=ifft(fft(yc)./fft(c2)).*sum(c2);

subplot(2,2,1); plot(x,y); title('original y');
subplot(2,2,2); plot(x,yc(1:2001)); title(['yc=y convoluted with c. Width = ' num2str(cw) ]);
subplot(2,2,3); plot(x,ydc);title(['ydc=recovered y. Width = ' num2str(dw) ]);
subplot(2,2,4); plot(x,fastsmooth(ydc,SmoothWidth,3));title('smoothed recovered y');

function g = gaussian(x, mu, sigma)
    g = exp(-((x - mu).^2) / (2 * sigma^2));
end

function s = fastsmooth(a,w,type)
    s = movmean(a,w);
end

%%LAB5
%% Task 1: First-Order IIR Low-Pass Filter
fs = 750; 
fc = 20;  
Wc = 2*pi*fc/fs;


x = exp(-Wc);
a0 = 1 - x;
b1 = x;


delta = [1, zeros(1, 1023)];
y = zeros(1, length(delta)); 


y(1) = a0 * delta(1); 
for i = 2:length(delta)
    y(i) = a0 * delta(i) + b1 * y(i-1);
end


H1 = fft(y); 


subplot(321);
plot((1:100), y(1:100)); grid on;
title('First-Order IIR Low-Pass Filter Impulse Response');

subplot(322);
plot((0:511)/512, abs(H1(1:512))); grid on;
title('First-Order IIR Low-Pass Filter Frequency Response');


z(1)=a0*y(1);

for i=2:length(delta)
    z(i)=a0*y(i)+b1*z(i-1);
end

subplot(323);
plot((1:100), z(1:100)); grid on;
title('Second-Order IIR Low-Pass Filter Impulse Response');

subplot(324);
plot((0:511)/512, abs(H1(1:512))); grid on;
title('Second-Order IIR Low-Pass Filter Frequency Response');

t=linspace(0,1,100);
x_noisy =sin(2*pi*20*t) + sin(2*pi*300*t);

%Noisy
x(1)=a0*x_noisy(1);

for i=2:length(x_noisy)
    x(i)=a0*x_noisy(i)+b1*x(i-1);
end

subplot(325);
plot(1:length(x),x_noisy); grid on;
title('Noisy signal');

subplot(326);
plot(1:length(x),x); grid on;
title('After filterng');



%% Task 2: Band-Pass and Band-Reject Filters
% Original Bandpass Filter Implementation
clc;
clear all; close all;
fs = 24000; 
fc1 = 1600; 
fc2 = 5000; 
f=(fc1+fc2)/2/fs;
BW = (fc2-fc1)/fs;   
R1 = 1 - 3*BW;
K1 = (1 - 2*R1*cos(2*pi*f) + R1^2) / (2 - 2*cos(2*pi*f));
a0 =1- K1;
a1 = 2*(K1-R1)*cos(2*pi*f);
a2 =R1^2-K1;
b1 = 2*R1*cos(2*pi*f);
b2=-R1^2;
delta=[1,zeros(1,200)];
h(1)= a0* delta(1);
h(2)= a0* delta(2) + a1* delta(1) +b1*h(1);
for i=3:length(delta)
    h(i)=a0* delta(i)+a1*delta(i-1)+a2*delta(i-2)+b1*h(i-1)+b2*h(i-2);
end
H=fft(h);
subplot(321);plot(1:100,h(1:100)); title('Impulse response of 2nd order passband IIR');grid on;
subplot(322);plot(1:100,abs(H(1:100))); title('Frequency response of 2nd order passband IIR');grid on;
%4th order pass-band IIR filter
y(1)=a0*h(1);
y(2)=a0*h(2) + a1*h(1)+ b1* y(1);
for i=3:length(h)
    y(i)=a0* h(i)+a1*h(i-1)+a2*h(i-2)+b1*y(i-1)+b2*y(i-2);
end
Y=fft(y);
subplot(323);plot(1:100,y(1:100)); title('Impulse response of 4th order passband IIR');grid on;
subplot(324);plot(1:100,abs(Y(1:100))); title('Frequency response of 4th order passband IIR');grid on;
t=linspace(0,1,100);
x_noisy =sin(2*pi*100*t) + sin(2*pi*2300*t);
x_filtered = conv(x_noisy,y);
subplot(325);plot(1:length(x_noisy),x_noisy); grid on;title('Noisy signal');
subplot(326);plot(1:100,x_filtered(1:100)); grid on;title('After filterng');

%% Band Rejection Filter Implementation (New Figure)
figure;
% Parameters are the same as before
fs = 24000;
fc1 = 1600;
fc2 = 5000;
f = (fc1+fc2)/2/fs;
BW = (fc2-fc1)/fs;

% For band rejection (notch) filter, we need to modify the coefficients
R1 = 1 - 3*BW;
K1 = (1 - 2*R1*cos(2*pi*f) + R1^2) / (2 - 2*cos(2*pi*f));
a0 = K1;                       % Changed for notch filter
a1 = -2*K1*cos(2*pi*f);        % Changed for notch filter
a2 = K1;                       % Changed for notch filter
b1 = 2*R1*cos(2*pi*f);
b2 = -R1^2;

% Original signal for impulse response
delta = [1, zeros(1, 200)];

% 2nd order band rejection filter
h_notch(1) = a0 * delta(1);
h_notch(2) = a0 * delta(2) + a1 * delta(1) + b1 * h_notch(1);
for i = 3:length(delta)
    h_notch(i) = a0 * delta(i) + a1 * delta(i-1) + a2 * delta(i-2) + b1 * h_notch(i-1) + b2 * h_notch(i-2);
end

% Frequency domain analysis
H_notch = fft(h_notch);

% 4th order band rejection filter (cascading two 2nd order filters)
y_notch(1) = a0 * h_notch(1);
y_notch(2) = a0 * h_notch(2) + a1 * h_notch(1) + b1 * y_notch(1);
for i = 3:length(h_notch)
    y_notch(i) = a0 * h_notch(i) + a1 * h_notch(i-1) + a2 * h_notch(i-2) + b1 * y_notch(i-1) + b2 * y_notch(i-2);
end

% Frequency domain analysis for 4th order filter
Y_notch = fft(y_notch);

% Create test signal (same as before)
t = linspace(0, 1, 100);
x_noisy = sin(2*pi*100*t) + sin(2*pi*2300*t);
x_filtered_notch = conv(x_noisy, y_notch);

% Compute frequency responses for notch filtering
X_filtered_notch = fft(x_filtered_notch(1:100));

% Plot 2nd order band rejection filter
subplot(321); plot(1:100, h_notch(1:100)); 
title('Impulse response of 2nd order band rejection IIR'); grid on;
ylabel('Amplitude'); xlabel('Sample');

subplot(322); plot((0:99)/200*fs, abs(H_notch(1:100))); 
title('Frequency response of 2nd order band rejection IIR'); grid on;
ylabel('Magnitude'); xlabel('Frequency (Hz)');

% Plot 4th order band rejection filter
subplot(323); plot(1:100, y_notch(1:100)); 
title('Impulse response of 4th order band rejection IIR'); grid on;
ylabel('Amplitude'); xlabel('Sample');

subplot(324); plot((0:99)/200*fs, abs(Y_notch(1:100))); 
title('Frequency response of 4th order band rejection IIR'); grid on;
ylabel('Magnitude'); xlabel('Frequency (Hz)');


x_filtered_notch = filter([a0 a1 a2], [1 -b1 -b2], x_noisy);

% Plot the time domain signals
subplot(325); 
t = (0:length(x_noisy)-1)/fs; 
plot(t, x_noisy); 
grid on; 
title('Noisy signal (time domain)'); 
ylabel('Amplitude'); 
xlabel('Time (s)');

subplot(326); 
plot(t, x_filtered_notch);  
grid on; 
title('After band rejection filtering (time domain)');
ylabel('Amplitude'); 
xlabel('Time (s)');

%% Band Rejection Filter Implementation
clc;
clear all;
close all;

% Sampling frequency
fs = 24000;
fc1 = 1600;
fc2 = 5000;
f = (fc1+fc2)/2/fs;
BW = (fc2-fc1)/fs;

% Band-reject filter coefficients
R1 = 1 - 3*BW;
K1 = (1 - 2*R1*cos(2*pi*f) + R1^2) / (2 - 2*cos(2*pi*f));
a0 = K1;
a1 = -2*K1*cos(2*pi*f);
a2 = K1;
b1 = 2*R1*cos(2*pi*f);
b2 = -R1^2;

% Impulse response
delta = [1, zeros(1, 200)];
h_notch(1) = a0 * delta(1);
h_notch(2) = a0 * delta(2) + a1 * delta(1) + b1 * h_notch(1);
for i = 3:length(delta)
    h_notch(i) = a0 * delta(i) + a1 * delta(i-1) + a2 * delta(i-2) + b1 * h_notch(i-1) + b2 * h_notch(i-2);
end

% Frequency domain analysis
H_notch = fft(h_notch);

% 4th order band-reject filter (cascading two 2nd order filters)
y_notch(1) = a0 * h_notch(1);
y_notch(2) = a0 * h_notch(2) + a1 * h_notch(1) + b1 * y_notch(1);
for i = 3:length(h_notch)
    y_notch(i) = a0 * h_notch(i) + a1 * h_notch(i-1) + a2 * h_notch(i-2) + b1 * y_notch(i-1) + b2 * y_notch(i-2);
end

% Frequency domain analysis for 4th order filter
Y_notch = fft(y_notch);

% Test signal
t = linspace(0, 1, 100);
x_noisy = sin(2*pi*100*t) + sin(2*pi*2300*t);
x_filtered_notch = conv(x_noisy, y_notch);

% Compute frequency responses for notch filtering
X_filtered_notch = fft(x_filtered_notch(1:100));

% Plot 2nd order band-reject filter
figure;
subplot(321);
plot(1:100, h_notch(1:100));
title('Impulse Response of 2nd Order Band-Reject IIR');
grid on;
ylabel('Amplitude'); xlabel('Sample');

subplot(322);
plot((0:99)/200*fs, abs(H_notch(1:100)));
title('Frequency Response of 2nd Order Band-Reject IIR');
grid on;
ylabel('Magnitude'); xlabel('Frequency (Hz)');

% Plot 4th order band-reject filter
subplot(323);
plot(1:100, y_notch(1:100));
title('Impulse Response of 4th Order Band-Reject IIR');
grid on;
ylabel('Amplitude'); xlabel('Sample');

subplot(324);
plot((0:99)/200*fs, abs(Y_notch(1:100)));
title('Frequency Response of 4th Order Band-Reject IIR');
grid on;
ylabel('Magnitude'); xlabel('Frequency (Hz)');

% Apply filter to noisy signal
x_filtered_notch = filter([a0 a1 a2], [1 -b1 -b2], x_noisy);

% Plot the time-domain signals
subplot(325);
t = (0:length(x_noisy)-1)/fs;
plot(t, x_noisy);
grid on;
title('Noisy Signal (Time Domain)');
ylabel('Amplitude'); xlabel('Time (s)');

subplot(326);
plot(t, x_filtered_notch);
grid on;
title('After Band-Rejection Filtering (Time Domain)');
ylabel('Amplitude'); xlabel('Time (s)');

%%LAB6
%task1
%Design Chebyshev 1 Type filter using Matlab build-in function cheby1 with specifications given below. Define and plot frequency response (non-dB and dB plots) and Impulse response of the filter. Apply designed filter to some input signal with different frequencies. Make some conclusions.
clc; clear; close all;

Wp = [0.2 0.4];

[b, a] = cheby1(2, 0.3, Wp, "bandpass");

%Impulse response
[h, t]=impz(b, a, 1024);

%Frequency response
[G, f]=freqz(b, a, 512);    

figure;
subplot(311); plot(t, h); title("Impulse response of the filter"); grid on;
subplot(312); plot(f, abs(G)); title("Frequency response of the filter (non-dB)"); grid on;
subplot(313); plot((0 : 511) / 1024, abs(10*log10(G(1 : 512)))); title("Frequency response of the filter (dB)"); grid on;

%Applying filter to an input signal
fs = 1000;
t2 = 0:1/fs:1;
f1 = 15; f2 =460; f3 = 220; f4 = 250;
x = sin(2*pi*f1*t2) + sin(2*pi*f2*t2) + sin(2*pi*f3*t2) + 2*sin(2*pi*f4*t2);

y  = filter(b, a, x);

figure;
subplot(221); plot(t2, x); title("Input signal"); grid on;
subplot(222); plot(t2,y); title("Filtered input signal"); grid on;

X_freq = fft(x, 512);
Y_freq = fft(y, 512);

subplot(223); plot((1: 512), abs(X_freq(1 : 512))); title("Spectrum before filtering"); grid on;
subplot(224); plot((1: 512), abs(Y_freq(1 : 512))); title("Spectrum after filtering"); grid on;

%%
%task 2
%Design Chebyshev 1 Type low-pass filters using Chebyshev polynomials with specifications given below. Define and plot frequency response (non-dB and dB plots) and Impulse response of the filters. Implement Chebyshev 1 Type low-pass filter for filtering noisy sinusoidal signal (sine wave+ high frequencies). Plot signal before and after filter. Compare results for both filters. Make some conclusions
clc;clear;close all;
n1=4;
n2=20;
r=0.5;
fc=0.25;
f=(0:511)/1024;
Fs=0:0.01:1;
x=0:0.01:1;
w=Fs/fc;
T4=chebyshevT(n1, x);
T20=chebyshevT(n2, x);
figure(1);
plot(x,T4,'g', x, T20, 'r'); grid on;
legend('T(4)', 'T(20)');
T4m=chebyshevT(n1,w);
T20m=chebyshevT(n2,w);
G4=1./sqrt(1+r.^2.*T4m.^2);
G20=1./sqrt(1+r.^2.*T20m.^2);
figure(2);
plot(w, G4, 'g', w, G20, 'r'); grid on; title('Frequency response (non dB)');
legend('T(4)', 'T(20)');
figure(3);
plot(w, 10*log10(G4), 'g', w, 10*log10(G20), 'r'); grid on; title('Frequency response (dB)');
legend('T(4)', 'T(20)');
%noisy signal
t=0:0.001:1;
s=sin(2*pi*25*t)+0.7*sin(2*pi*220*t);
figure(4);
subplot(211);plot(s(1:100)); grid on; title('Noisy signal');
s_out4=conv(T4,s);
s_out20=conv(T20,s);
subplot(212); plot(t(1:100), s_out4(1:100), 'b', t(1:100), s_out20(1:100), 'r'); grid on;

%%
%task3
%Design Chebyshev 1 Type high-pass filter using Table (see data below) with specifications given below. Define and plot frequency response (non-dB and dB plots) and Impulse response of the filter. Implement Chebyshev 1 Type high-pass filter for selecting noise from sinusoids (sine wave+ high frequencies). Plot signal before and after filter. Make some conclusions.
clc;clear;close all;
n=6; r=0.5; fc=0.3;
a0=4.18e-3;
a1=-2.51e-02;
a2=6.28e-02;
a3=-8.37e-02;
a4=6.28e-02;
a5=-2.51e-02;
a6=4.18e-03;
b1=-2.31e+00;
b2=-3.29;
b3=-2.9;
b4=-1.69;
b5=-6.02e-01;
b6=-1.03e-01;
a=[a0,a1,a2,a3,a4,a5,a6];
b=[b1, b2, b3, b4, b5, b6];
fvtool(a,b);
t=0:0.001:10;
f1=220; f2=150; f3=420;
s=sin(2*pi*f1*t)+0.7*sin(2*pi*f2*t)+0.3*sin(2*pi*f3*t); %noisy signal
s_out=filter(a,b,s); %after filtering
S=fft(s, 512);
S_out=fft(s_out,512);
subplot(211); plot(t(1:100),s(1:100),'b',t(1:100),s_out(1:100),'r'); grid on; legend('s(t)', 's_out(t)');

subplot(212); plot(f(1:100),abs(S(1:100)),'b',f(1:100),abs(S_out(1:100)),'r'); grid on; legend('S(t)', 'S_out(t)');









